external class Random {
  
  constructor ([seed: integer])

  function nextBool -> bool

  function nextInt(max: integer) -> integer

  function nextDouble() -> float

  function nextColorHex({hasAlpha: bool = false}) -> string

  function nextBrightColorHex({hasAlpha: bool = false}) -> string

  function nextIterable(list: Iterable) -> any

  function shuffle(list: Iterable) -> Iterable
}

external class Math {
  static const e: float = 2.718281828459045
  
  static const pi: float = 3.1415926535897932

  /// Convert [radians] to degrees.
  static function degrees(radians)

  /// Convert [degrees] to radians.
  static function radians(degrees)

  static function radiusToSigma(radius: float) -> float
  
  /// Boxâ€“Muller transform for generating normally distributed random numbers between [min : max].
  static function gaussianNoise(mean: float, standardDeviation: float, {min: float, max: float, randomGenerator}) -> float

  /// Noise generation function provided by [fast_noise](https://pub.dev/packages/fast_noise) package.
  /// Noise types: perlin, perlinFractal, cubic, cubicFractal
  static function noise2d(size, {seed, noiseType = 'cubic', frequency = 0.01})

  /// Return the smaller value between a & b.
  /// If one of them is null, return the other value.
  static function min(a, b)

  /// Return the greater value between a & b.
  /// If one of them is null, return the other value.
  static function max(a, b)

  static function sqrt(x: number) -> number

  static function pow(x: number, exponent: number) -> number

  static function sin(x: number) -> number

  static function cos(x: number) -> number

  static function tan(x: number) -> number

  static function exp(x: number) -> number

  static function log(x: number) -> number

  static function parseInt(source: string, {radix: integer?}) -> number

  static function parseDouble(source: string) -> number

  static function sum(list: List<number>) -> number

  static function checkBit(index: integer, check: integer) -> bool

  static function bitLS(x: integer, distance: integer) -> bool

  static function bitRS(x: integer, distance: integer) -> bool

  static function bitAnd(x: integer, y: integer) -> bool

  static function bitOr(x: integer, y: integer) -> bool

  static function bitNot(x: integer) -> bool

  static function bitXor(x: integer, y: integer) -> bool
}
