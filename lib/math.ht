external class Random {
  
  constructor ([seed: integer])

  function nextBool -> bool

  /// generate a random bool value based on the input and target value.
  /// if the input value is greater than target, always return true
  /// if the input value is less than target, the more the input is near target,
  /// the more likely to return true.
  function nextBoolBiased(input: float, target: float) -> bool

  /// generate a random integer value, it has a higher probability to get value near the target value.
  function nearInt(max: integer, {exponent: float = 0.5}) -> integer

  /// generate a random integer value, it has a lower probability to get value near the target value.
  function distantInt(max: integer, {exponent: float = 0.5}) -> integer

  function nextInt(max: integer) -> integer

  function nextDouble() -> float

  function nextColorHex({hasAlpha: bool = false}) -> string

  function nextBrightColorHex({hasAlpha: bool = false}) -> string

  function nextIterable(list: Iterable) -> any

  function shuffle(list: Iterable) -> Iterable
}

abstract class Math {
  /// Base of the natural logarithms.
  ///
  /// Typically written as "e".
  static const e = 2.718281828459045;

  /// Natural logarithm of 10.
  ///
  /// The natural logarithm of 10 is the number such that `pow(E, LN10) == 10`.
  /// This value is not exact, but it is the closest representable double to the
  /// exact mathematical value.
  static const ln10 = 2.302585092994046;

  /// Natural logarithm of 2.
  ///
  /// The natural logarithm of 2 is the number such that `pow(E, LN2) == 2`.
  /// This value is not exact, but it is the closest representable double to the
  /// exact mathematical value.
  static const ln2 = 0.6931471805599453;

  /// Base-2 logarithm of [e].
  static const log2e = 1.4426950408889634;

  /// Base-10 logarithm of [e].
  static const log10e = 0.4342944819032518;

  /// The PI constant.
  static const pi = 3.1415926535897932;

  /// Square root of 1/2.
  static const sqrt1_2 = 0.7071067811865476;

  /// Square root of 2.
  static const sqrt2 = 1.4142135623730951;

  /// Returns a random float value between 0.0 and 1.0.
  external static function random()

  /// Return the smaller value between a & b.
  /// If one of them is null, return the other value.
  external static function min(a, b)

  /// Return the greater value between a & b.
  /// If one of them is null, return the other value.
  external static function max(a, b)

  external static function pow(x: number, exponent: number) -> number

  external static function sin(x: number) -> number

  external static function cos(x: number) -> number

  external static function tan(x: number) -> number

  external static function asin(x: number) -> number

  external static function acos(x: number) -> number

  external static function atan(x: number) -> number

  external static function sqrt(x: number) -> number

  external static function exp(x: number) -> number

  external static function log(x: number) -> number
  
  /// Convert [radians] to degrees.
  external static function degrees(radians)

  /// Convert [degrees] to radians.
  external static function radians(degrees)

  external static function radiusToSigma(radius: float) -> float
  
  /// Boxâ€“Muller transform for generating normally distributed random numbers between [min : max].
  external static function gaussianNoise(mean: float, standardDeviation: float, {min: float, max: float, randomGenerator}) -> float

  /// Noise generation function provided by [fast_noise](https://pub.dev/packages/fast_noise) package.
  /// Noise types: perlin, perlinFractal, cubic, cubicFractal
  external static function noise2d(width, height, {seed, noiseType = 'cubic', frequency = 0.01})

  /// Calculate the angle in dgree from start to end, return the result in degrees.
  external static function angle(startx, starty, endx, endy)

  /// Calculate the angle in dgree from start to end, return the result in radians.
  external static function aangle(startx, starty, endx, endy)
  
  /// Input a value and a target, get a output between 0.0 and 1.0.
  /// The more the input is near the target, the more the output is near 1.0.
  external static function gradualValue(input, target, { power = 0.5 })
}
