/// Most of the apis here are named based on Dart SDK's Classes:
/// [num], [int], [double], [bool], [String], [List] and [Map]

/// There are some original methods, like List.random, etc...

external abstract class num {

  fun toPercentageString([fractionDigits: int = 0]) -> str

  fun compareTo(compareTo: num) -> int

  fun remainder(other: num) -> num

  get isNaN -> bool

  get isNegative -> bool

  get isInfinite -> bool

  get isFinite -> bool

  /// Returns the absolute value of this integer.
  fun abs() -> int

  /// Returns the sign of this integer.
  get sign -> int

  /// Returns the integer closest to this number.
  fun round() -> int

  /// Returns the greatest integer no greater than this number.
  fun floor() -> int

  /// Returns the least integer which is not smaller than this number.
  fun ceil() -> int

  /// Returns the integer obtained by discarding any fractional
  /// part of this number.
  fun truncate() -> int

  /// Returns the integer double value closest to `this`.
  fun roundToDouble() -> float

  /// Returns the greatest integer double value no greater than `this`.
  fun floorToDouble() -> float

  /// Returns the least integer double value no smaller than `this`.
  fun ceilToDouble() -> float

  /// Returns the integer double value obtained by discarding any fractional
  /// digits from `this`.
  fun truncateToDouble() -> float

  fun toInt() -> int

  fun toDouble() -> float

  fun toStringAsFixed(fractionDigits: int) -> str

  fun toStringAsExponential([fractionDigits: int]) -> str

  fun toStringAsPrecision(precision: int) -> str
  
  fun toString() -> str
}

external class int extends num {
  
  /// Parse [source] as a, possibly signed, integer literal.
  static fun parse(source: str, {radix: int?}) -> int

  fun clamp(lowerLimit: num, upperLimit: num) -> num
	
  /// Returns this integer to the power of [exponent] modulo [modulus].
  fun modPow(exponent: int, modulus: int) -> int

  /// Returns the modular multiplicative inverse of this integer
  fun modInverse(modulus: int) -> int

  /// Returns the greatest common divisor of this integer and [other].
  fun gcd(other: int) -> int

  /// Returns true if and only if this integer is even.
  get isEven -> bool

  /// Returns true if and only if this integer is odd.
  get isOdd -> bool

  /// Returns the minimum number of bits required to store this integer.
  get bitLength -> int
	
  /// Returns the least significant [width] bits of this integer as a
  /// non-negative number (i.e. unsigned representation).  The returned value has
  /// zeros in all bit positions higher than [width].
  fun toUnsigned(width: int) -> int
	
  /// Returns the least significant [width] bits of this integer, extending the
  /// highest retained bit to the sign.  This is the same as truncating the value
  /// to fit in [width] bits using an signed 2-s complement representation.  The
  /// returned value has the same bit value in all positions higher than [width].
  fun toSigned(width: int) -> int

  /// Converts [this] to a string representation in the given [radix].
  fun toRadixString(radix: int) -> str
}

/// An arbitrarily large integer.
external class BigInt {
  static get zero -> BigInt;
  static get one -> BigInt;
  static get two -> BigInt;

  /// Parses [source] as a, possibly signed, integer literal and returns its
  /// value.
  static fun parse(source: str, {radix: int}) -> BigInt

  /// Allocates a big integer from the provided [value] number.
  static fun from(value: num) -> BigInt

  /// Returns the absolute value of this integer.
  fun abs() -> BigInt

  /// Returns the remainder of the truncating division of `this` by [other].
  fun remainder(other: BigInt)

  /// Compares this to `other`.
  fun compareTo(other: BigInt) -> int

  /// Returns the minimum number of bits required to store this big integer.
  get bitLength -> int

  /// Returns the sign of this big integer.
  get sign -> int

  /// Whether this big integer is even.
  get isEven -> bool

  /// Whether this big integer is odd.
  get isOdd -> bool

  /// Whether this number is negative.
  get isNegative -> bool

  /// Returns `this` to the power of [exponent].
  fun pow(exponent: int) -> BigInt

  /// Returns this integer to the power of [exponent] modulo [modulus].
  fun modPow(exponent: BigInt, modulus: BigInt) -> BigInt

  /// Returns the modular multiplicative inverse of this big integer
  /// modulo [modulus].
  fun modInverse(modulus: BigInt) -> BigInt

  /// Returns the greatest common divisor of this big integer and [other].
  fun gcd(other: BigInt) -> BigInt

  /// Returns the least significant [width] bits of this big integer as a
  /// non-negative number (i.e. unsigned representation).  The returned value has
  /// zeros in all bit positions higher than [width].
  fun toUnsigned(width: int) -> BigInt

  /// Returns the least significant [width] bits of this integer, extending the
  /// highest retained bit to the sign.  This is the same as truncating the value
  /// to fit in [width] bits using an signed 2-s complement representation.  The
  /// returned value has the same bit value in all positions higher than [width].
  fun toSigned(width: int) -> BigInt

  /// Whether this big integer can be represented as an `int` without losing
  /// precision.
  get isValidInt -> bool

  /// Returns this [BigInt] as an [int].
  fun toInt() -> int

  /// Returns this [BigInt] as a [double].
  ///
  /// If the number is not representable as a [double], an
  /// approximation is returned. For numerically large integers, the
  /// approximation may be infinite.
  fun toDouble() -> float

  /// Returns a String-representation of this integer.
  fun toString() -> str

  /// Converts [this] to a string representation in the given [radix].
  fun toRadixString(radix: int) -> String
}

external class float extends num {

  fun toString() -> str

  fun compareTo(compareTo: num) -> int

  fun remainder(other: num) -> num

  /// Returns the integer closest to this number.
  fun round() -> int

  /// Returns the greatest integer no greater than this number.
  fun floor() -> int

  /// Returns the least integer which is not smaller than this number.
  fun ceil() -> int

  /// Returns the integer obtained by discarding any fractional
  /// part of this number.
  fun truncate() -> int

  /// Returns the integer double value closest to `this`.
  fun roundToDouble() -> float

  /// Returns the greatest integer double value no greater than `this`.
  fun floorToDouble() -> float

  /// Returns the least integer double value no smaller than `this`.
  fun ceilToDouble() -> float

  /// Returns the integer double value obtained by discarding any fractional
  /// digits from `this`.
  fun truncateToDouble() -> float

  get isNaN -> bool

  get isNegative -> bool

  get isInfinite -> bool

  get isFinite -> bool

  fun clamp(lowerLimit: num, upperLimit: num) -> num

  fun toStringAsFixed(fractionDigits: int) -> str

  fun toStringAsExponential([fractionDigits: int]) -> str

  fun toStringAsPrecision(precision: int) -> str
  
  static get nan -> float;
  static get infinity -> float;
  static get negativeInfinity -> float;
  static get minPositive -> float;
  static get maxFinite -> float;
	
	static fun parse(value: str) -> float
  
  /// Returns the absolute value of this number.
  fun abs() -> float

  /// Returns the sign of the double's numerical value.
  get sign -> float
}

external class bool {

  fun toString() -> str

	static fun parse(value: str) -> bool
}

external class str {

  get characters -> Iterable

  fun toString() -> str

	static fun parse(value) -> str

  fun compareTo(index: str) -> int

  fun codeUnitAt(index: int) -> int

  get length -> int

	fun endsWith(other: str) -> bool

	fun startsWith(pattern: str, [index: num = 0]) -> bool

	fun indexOf(pattern: str, [start: num = 0]) -> num

	fun lastIndexOf(pattern, [start: num?]) -> num

	get isEmpty -> bool

	get isNotEmpty -> bool

	fun substring(startIndex: num, [endIndex: num?]) -> str

	fun trim() -> str

	fun trimLeft() -> str

	fun trimRight() -> str

	fun padLeft(width: num, [padding: str = ' ']) -> str

	fun padRight(width: num, [padding: str = ' ']) -> str

	fun contains(other: str, [startIndex: num = 0]) -> bool

	fun replaceFirst(from: str, to: str, [startIndex: num = 0]) -> str

	fun replaceAll(from: str, replace: str) -> str

	fun replaceRange(start: num, end: num, replacement: str) -> str

	fun split(pattern) -> List

	fun toLowerCase() -> str

	fun toUpperCase() -> str
}

external class Iterator {
  /// Advances the iterator to the next element of the iteration.
  fun moveNext() -> bool

  /// The current element.
  get current -> any
}

external class Iterable {

  /// Returns a new `Iterator` that allows iterating the Iterable's elements.
  get iterator -> Iterator

  get random -> any

  fun toJson() -> Map

  /// The current elements of this iterable modified by [toElement].
  fun map(toElement: (any) -> any) -> Iterable

  /// Returns a new lazy [Iterable] with all elements that satisfy the
  fun where(test: (any) -> bool) -> Iterable

  /// Expands each element of this [Iterable] into zero or more elements.
  fun expand(toElements: (any) -> Iterable) -> Iterable

	fun contains(value) -> bool
  
  /// Reduces a collection to a single value by iteratively combining elements
  /// of the collection using the provided function.
  fun reduce(combine: (any, any) -> any) -> any

  /// Reduces a collection to a single value by iteratively combining each
  /// element of the collection with an existing value
  fun fold(initialValue: any, combine: (any, any) -> any) -> any

  /// Checks whether every element of this iterable satisfies [test].
  fun every(test: (any) -> bool) -> bool

	fun join(separator: str) -> str

  /// Checks whether any element of this iterable satisfies [test].
  fun any(test: (any) -> bool) -> bool

  fun toList() -> List

	get length -> int

	get isEmpty -> bool

	get isNotEmpty -> bool

  fun take(count: int) -> Iterable

  fun takeWhile(test: (any) -> bool) -> Iterable

  fun skip(count: int) -> Iterable

  fun skipWhile(test: (any) -> bool) -> Iterable

	get first -> any

	get last -> any

	get single -> any

  /// Returns the first element that satisfies the given predicate [test].
  fun firstWhere(test: (any) -> bool, {orElse: () -> any}) -> any

  /// Returns the last element that satisfies the given predicate [test].
  fun lastWhere(test: (any) -> bool, {orElse: () -> any}) -> any

  /// Returns the single element that satisfies [test].
  fun singleWhere(test: (any) -> bool, {orElse: () -> any}) -> any

	fun elementAt(index: int) -> any

  fun toString() -> str
}

external class List extends Iterable {

  construct (... args: any)
  
	fun add(value: any)

  fun addAll(iterable: Iterable)

  get reversed -> Iterable

	fun indexOf(value: any, [start: int = 0]) -> int

	fun lastIndexOf(value: any, [start: int?]) -> int

	fun insert(index: int, value)

	fun insertAll(index: int, iterable)

	fun clear()

	fun remove(value: any)

	fun removeAt(index: int)

	fun removeLast()

  fun sublist(start: int, [end: int?]) -> List

  fun asMap() -> Map
  
  /// Sorts this list according to the order specified by the [compare] function.
  fun sort([compare: (any, any) -> int])

  /// Shuffles the elements of this list randomly.
  fun shuffle()
  
  /// The first index in the list that satisfies the provided [test].
  fun indexWhere(test: (any) -> bool, [start: int = 0]) -> int

  /// The last index in the list that satisfies the provided [test].
  fun lastIndexWhere(test: (any) -> bool, [start: int?]) -> int

  /// Removes all objects from this list that satisfy [test].
  fun removeWhere(test: (any) -> bool)

  /// Removes all objects from this list that fail to satisfy [test].
  fun retainWhere(test: (any) -> bool)

  /// Creates an [Iterable] that iterates over a range of elements.
  fun getRange(start: int, end: int) -> List
  
  /// Writes some elements of [iterable] into a range of this list.
  fun setRange(start: int, end: int, list: List, [skipCount: int = 0])

  /// Removes a range of elements from the list.
  fun removeRange(start: int, end: int)

  /// Overwrites a range of elements with [fillValue].
  fun fillRange(start: int, end: int, [fillValue: any])

  /// Replaces a range of elements with the elements of [replacements].
  fun replaceRange(start: int, end: int, replacements: List)
}

external class Set extends Iterable {

  construct (... args: any)

  fun add(value: any) -> bool

  fun addAll(elements: Iterable)

  fun remove(value: any) -> bool

  fun lookup(value: any) -> any

  fun removeAll(elements: Iterable)

  fun retainAll(elements: Iterable)

  fun removeWhere(test: (any) -> bool)
  
  fun retainWhere(test: (any) -> bool)

  fun containsAll(other: Iterable)

  fun intersection(other: Set) -> Set

  fun union(other: Set) -> Set

  fun difference(other: Set) -> Set

  fun clear()

  fun toSet() -> Set
}

external class Map {

  construct

  fun toString() -> str

	get length -> num

	get isEmpty -> bool

	get isNotEmpty -> bool

  get keys -> Iterable

  get values -> Iterable

	fun containsKey(value: any) -> bool

	fun containsValue(value: any) -> bool

	fun addAll(other: Map)

	fun clear()

	fun remove(key: any)

  fun putIfAbsent(key: any, value: any) -> any
}