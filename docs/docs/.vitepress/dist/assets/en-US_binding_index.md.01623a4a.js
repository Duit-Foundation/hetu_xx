import{o as n,c as s,a}from"./app.c9011ed2.js";const t='{"title":"Binding","description":"","frontmatter":{},"headers":[{"level":2,"title":"Function","slug":"function"},{"level":3,"title":"Typedef of external function","slug":"typedef-of-external-function"},{"level":2,"title":"Binding external function","slug":"binding-external-function"},{"level":2,"title":"Typedef for unwrap Hetu function into Dart function","slug":"typedef-for-unwrap-hetu-function-into-dart-function"},{"level":2,"title":"Binding of External class","slug":"binding-of-external-class"},{"level":2,"title":"Auto-Binding tools","slug":"auto-binding-tools"}],"relativePath":"en-US/binding/index.md","lastUpdated":1625730842026}',p={},o=a('<h1 id="binding"><a class="header-anchor" href="#binding" aria-hidden="true">#</a> Binding</h1><h2 id="function"><a class="header-anchor" href="#function" aria-hidden="true">#</a> Function</h2><h3 id="typedef-of-external-function"><a class="header-anchor" href="#typedef-of-external-function" aria-hidden="true">#</a> Typedef of external function</h3><p>External functions (for both global and methods) can be binded as the following type:</p><div class="language-dart"><pre><code><span class="token keyword">typedef</span> HTExternalFunction <span class="token operator">=</span> <span class="token keyword">dynamic</span> <span class="token keyword">Function</span><span class="token punctuation">(</span>\n    <span class="token punctuation">{</span>List<span class="token operator">&lt;</span><span class="token keyword">dynamic</span><span class="token operator">&gt;</span> positionalArgs<span class="token punctuation">,</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> <span class="token keyword">dynamic</span><span class="token operator">&gt;</span> namedArgs<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>HTTypeId<span class="token operator">&gt;</span> typeArgs<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">await</span> hetu<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>externalFunctions<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n  <span class="token comment">// you can omit the type, and keep the correct type parameter names,</span>\n  <span class="token comment">// this way Dart will still count it as HTExternalFunction</span>\n  <span class="token string">&#39;hello&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>positionalArgs<span class="token punctuation">,</span> namedArgs<span class="token punctuation">,</span> typeArgs<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span><span class="token string">&#39;greeting&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;hello&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p>or even you can directy write it as a Dart Function:</p><div class="language-dart"><pre><code><span class="token keyword">await</span> hetu<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>externalFunctions<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n  <span class="token string">&#39;hello&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span><span class="token string">&#39;greeting&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;hello&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p>It&#39;s easier to write and read in Dart Function form. However, this way the Interpreter will have to use Dart&#39;s [Function.apply] feature to call it. This is normally slower and inefficient than direct call.</p><h2 id="binding-external-function"><a class="header-anchor" href="#binding-external-function" aria-hidden="true">#</a> Binding external function</h2><p>To call Dart functions in Hetu, just init Hetu with [externalFunctions].</p><p>Then define those dart funtion in Hetu with [external] keyword.</p><p>Then you can call those functions in Hetu.</p><p>You can pass object from Dart to Hetu by the return value of external functions.</p><p>You can pass object from Hetu to Dart by the return value of Interpreter&#39;s [invoke] function;</p><div class="language-typescript"><pre><code><span class="token keyword">import</span> <span class="token string">&#39;package:hetu_script/hetu_script.dart&#39;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> hetu <span class="token operator">=</span> <span class="token function">Hetu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">await</span> hetu<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>externalFunctions<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token string">&#39;hello&#39;</span><span class="token operator">:</span> <span class="token punctuation">(</span>\n        <span class="token punctuation">{</span>List<span class="token operator">&lt;</span>dynamic<span class="token operator">&gt;</span> positionalArgs <span class="token operator">=</span> <span class="token keyword">const</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n            Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> dynamic<span class="token operator">&gt;</span> namedArgs <span class="token operator">=</span> <span class="token keyword">const</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n            List<span class="token operator">&lt;</span>HTTypeId<span class="token operator">&gt;</span> typeArgs <span class="token operator">=</span> <span class="token keyword">const</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token string">&#39;greeting&#39;</span><span class="token operator">:</span> <span class="token string">&#39;hello&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">await</span> hetu<span class="token punctuation">.</span><span class="token function">eval</span><span class="token punctuation">(</span>r<span class="token string">&#39;&#39;</span>&#39;\n      external fun hello\n      fun main <span class="token punctuation">{</span>\n        <span class="token keyword">var</span> dartValue <span class="token operator">=</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&#39;dart value:&#39;</span><span class="token punctuation">,</span> dartValue<span class="token punctuation">)</span>\n        dartValue<span class="token punctuation">[</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;bar&#39;</span>\n        <span class="token keyword">return</span> dartValue\n      <span class="token punctuation">}</span><span class="token string">&#39;&#39;</span>&#39;<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">var</span> hetuValue <span class="token operator">=</span> hetu<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token string">&#39;main&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&#39;hetu value: $hetuValue&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>And the output should be:</p><div class="language-"><pre><code>dart value: {greeting: hello}\nhetu value: {greeting: hello, foo: bar}\n</code></pre></div><h2 id="typedef-for-unwrap-hetu-function-into-dart-function"><a class="header-anchor" href="#typedef-for-unwrap-hetu-function-into-dart-function" aria-hidden="true">#</a> Typedef for unwrap Hetu function into Dart function</h2><p>In Hetu script:</p><div class="language-dart"><pre><code>fun <span class="token punctuation">[</span>DartFunction<span class="token punctuation">]</span> <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">:</span> num<span class="token punctuation">,</span> b<span class="token punctuation">:</span> num<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> num <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> a <span class="token operator">+</span> b\n<span class="token punctuation">}</span>\n\nfun getFunc <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> add\n<span class="token punctuation">}</span>\n</code></pre></div><p>Then when you evaluate this [add] function in Hetu, you will get a native Dart function. This grammar could also be used on literal function, this is especially usefull when you try to bind callback function to a dart widget.</p><div class="language-dart"><pre><code><span class="token keyword">typedef</span> DartFunction <span class="token operator">=</span> int <span class="token keyword">Function</span><span class="token punctuation">(</span>int a<span class="token punctuation">,</span> int b<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nint <span class="token function">hetuAdd</span><span class="token punctuation">(</span>DartFunction func<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> func <span class="token operator">=</span> hetu<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token string">&#39;getFunc&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>You have to bind the Dart typedef in [Interpreter.init] before you can use it.</p><div class="language-dart"><pre><code><span class="token keyword">await</span> hetu<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>externalFunctions<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n  externalFunctionTypedef<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n  <span class="token string">&#39;DartFunction&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">(</span>HTFunction function<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">(</span>int a<span class="token punctuation">,</span> int b<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// must convert the return type here to let dart know its return value type.</span>\n      <span class="token keyword">return</span> function<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">as</span> int<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p>The typedef of the unwrapper is:</p><div class="language-dart"><pre><code><span class="token keyword">typedef</span> HTExternalFunctionTypedef <span class="token operator">=</span> <span class="token keyword">Function</span> <span class="token keyword">Function</span><span class="token punctuation">(</span>HTFunction hetuFunction<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><h2 id="binding-of-external-class"><a class="header-anchor" href="#binding-of-external-class" aria-hidden="true">#</a> Binding of External class</h2><p>It&#39;s possible to get and return pure Dart object with class information in Hetu.</p><p>To achieve this, you have to write a full definition of that class in Hetu, which includes 4 parts of code:</p><ul><li>Original class definition of the class you intended to use in Hetu. For Dart &amp; Flutter, this is the part where you already have when you import a library.</li><li>An extension on that class. This part is used for dynamic reflection in Hetu and should return members of this class.</li><li>A binding definition of that class, which extends [HTExternalClass] interface provided by Hetu&#39;s dart lib. This part is used for access to the constructor and static members of that class.</li><li>A Hetu version of class definition of that class. This part is used for Hetu to understand the structure and type of this class.</li></ul><p>You can check the following example for how to bind a class and its various kinds of members.</p><div class="language-dart"><pre><code><span class="token keyword">import</span> <span class="token string">&#39;package:hetu_script/hetu_script.dart&#39;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>\n  <span class="token keyword">static</span> <span class="token keyword">final</span> races <span class="token operator">=</span> <span class="token operator">&lt;</span>String<span class="token operator">&gt;</span><span class="token punctuation">[</span><span class="token string">&#39;Caucasian&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token keyword">static</span> String _level <span class="token operator">=</span> <span class="token string">&#39;0&#39;</span><span class="token punctuation">;</span>\n  <span class="token keyword">static</span> String <span class="token keyword">get</span> level <span class="token operator">=</span><span class="token operator">&gt;</span> _level<span class="token punctuation">;</span>\n  <span class="token keyword">static</span> <span class="token keyword">set</span> <span class="token function">level</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> _level <span class="token operator">=</span> value<span class="token punctuation">;</span>\n  <span class="token keyword">static</span> String <span class="token function">meaning</span><span class="token punctuation">(</span>int n<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token string">&#39;The meaning of life is $n&#39;</span><span class="token punctuation">;</span>\n\n  String <span class="token keyword">get</span> child <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token string">&#39;Tom&#39;</span><span class="token punctuation">;</span>\n\n  String name<span class="token punctuation">;</span>\n  String race<span class="token punctuation">;</span>\n\n  <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;Jimmy&#39;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>race <span class="token operator">=</span> <span class="token string">&#39;Caucasian&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  Person<span class="token punctuation">.</span><span class="token function">withName</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>race <span class="token operator">=</span> <span class="token string">&#39;Caucasian&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">void</span> <span class="token function">greeting</span><span class="token punctuation">(</span>String tag<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&#39;Hi! $tag&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">extension</span> PersonBinding <span class="token keyword">on</span> Person <span class="token punctuation">{</span>\n  <span class="token keyword">dynamic</span> <span class="token function">htFetch</span><span class="token punctuation">(</span>String varName<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">switch</span> <span class="token punctuation">(</span>varName<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">case</span> <span class="token string">&#39;name&#39;</span><span class="token punctuation">:</span>\n        <span class="token keyword">return</span> name<span class="token punctuation">;</span>\n      <span class="token keyword">case</span> <span class="token string">&#39;race&#39;</span><span class="token punctuation">:</span>\n        <span class="token keyword">return</span> race<span class="token punctuation">;</span>\n      <span class="token keyword">case</span> <span class="token string">&#39;greeting&#39;</span><span class="token punctuation">:</span>\n        <span class="token keyword">return</span> <span class="token punctuation">(</span>\n                <span class="token punctuation">{</span>List<span class="token operator">&lt;</span><span class="token keyword">dynamic</span><span class="token operator">&gt;</span> positionalArgs <span class="token operator">=</span> <span class="token keyword">const</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n                Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> <span class="token keyword">dynamic</span><span class="token operator">&gt;</span> namedArgs <span class="token operator">=</span> <span class="token keyword">const</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n                List<span class="token operator">&lt;</span>HTType<span class="token operator">&gt;</span> typeArgs <span class="token operator">=</span> <span class="token keyword">const</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span>\n            <span class="token function">greeting</span><span class="token punctuation">(</span>positionalArgs<span class="token punctuation">.</span>first<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">case</span> <span class="token string">&#39;child&#39;</span><span class="token punctuation">:</span>\n        <span class="token keyword">return</span> child<span class="token punctuation">;</span>\n      <span class="token keyword">default</span><span class="token punctuation">:</span>\n        <span class="token keyword">throw</span> HTError<span class="token punctuation">.</span><span class="token function">undefined</span><span class="token punctuation">(</span>varName<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">void</span> <span class="token function">htAssign</span><span class="token punctuation">(</span>String varName<span class="token punctuation">,</span> <span class="token keyword">dynamic</span> varValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">switch</span> <span class="token punctuation">(</span>varName<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">case</span> <span class="token string">&#39;name&#39;</span><span class="token punctuation">:</span>\n        name <span class="token operator">=</span> varValue<span class="token punctuation">;</span>\n        <span class="token keyword">break</span><span class="token punctuation">;</span>\n      <span class="token keyword">case</span> <span class="token string">&#39;race&#39;</span><span class="token punctuation">:</span>\n        race <span class="token operator">=</span> varValue<span class="token punctuation">;</span>\n        <span class="token keyword">break</span><span class="token punctuation">;</span>\n      <span class="token keyword">default</span><span class="token punctuation">:</span>\n        <span class="token keyword">throw</span> HTError<span class="token punctuation">.</span><span class="token function">undefined</span><span class="token punctuation">(</span>varName<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">class</span> <span class="token class-name">PersonClassBinding</span> <span class="token keyword">extends</span> <span class="token class-name">HTExternalClass</span> <span class="token punctuation">{</span>\n  <span class="token function">PersonClassBinding</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token string">&#39;Person&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token metadata symbol">@override</span>\n  <span class="token keyword">dynamic</span> <span class="token function">memberGet</span><span class="token punctuation">(</span>String varName<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">switch</span> <span class="token punctuation">(</span>varName<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">case</span> <span class="token string">&#39;Person&#39;</span><span class="token punctuation">:</span>\n        <span class="token keyword">return</span> <span class="token punctuation">(</span>\n                <span class="token punctuation">{</span>List<span class="token operator">&lt;</span><span class="token keyword">dynamic</span><span class="token operator">&gt;</span> positionalArgs <span class="token operator">=</span> <span class="token keyword">const</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n                Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> <span class="token keyword">dynamic</span><span class="token operator">&gt;</span> namedArgs <span class="token operator">=</span> <span class="token keyword">const</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n                List<span class="token operator">&lt;</span>HTType<span class="token operator">&gt;</span> typeArgs <span class="token operator">=</span> <span class="token keyword">const</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span>\n            <span class="token function">Person</span><span class="token punctuation">(</span>positionalArgs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> positionalArgs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">case</span> <span class="token string">&#39;Person.withName&#39;</span><span class="token punctuation">:</span>\n        <span class="token keyword">return</span> <span class="token punctuation">(</span>\n                <span class="token punctuation">{</span>List<span class="token operator">&lt;</span><span class="token keyword">dynamic</span><span class="token operator">&gt;</span> positionalArgs <span class="token operator">=</span> <span class="token keyword">const</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n                Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> <span class="token keyword">dynamic</span><span class="token operator">&gt;</span> namedArgs <span class="token operator">=</span> <span class="token keyword">const</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n                List<span class="token operator">&lt;</span>HTType<span class="token operator">&gt;</span> typeArgs <span class="token operator">=</span> <span class="token keyword">const</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span>\n            Person<span class="token punctuation">.</span><span class="token function">withName</span><span class="token punctuation">(</span>positionalArgs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n                <span class="token punctuation">(</span>positionalArgs<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token operator">?</span> positionalArgs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">:</span> <span class="token string">&#39;Caucasion&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">case</span> <span class="token string">&#39;Person.meaning&#39;</span><span class="token punctuation">:</span>\n        <span class="token keyword">return</span> <span class="token punctuation">(</span>\n                <span class="token punctuation">{</span>List<span class="token operator">&lt;</span><span class="token keyword">dynamic</span><span class="token operator">&gt;</span> positionalArgs <span class="token operator">=</span> <span class="token keyword">const</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n                Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> <span class="token keyword">dynamic</span><span class="token operator">&gt;</span> namedArgs <span class="token operator">=</span> <span class="token keyword">const</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n                List<span class="token operator">&lt;</span>HTType<span class="token operator">&gt;</span> typeArgs <span class="token operator">=</span> <span class="token keyword">const</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span>\n            Person<span class="token punctuation">.</span><span class="token function">meaning</span><span class="token punctuation">(</span>positionalArgs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">case</span> <span class="token string">&#39;Person.level&#39;</span><span class="token punctuation">:</span>\n        <span class="token keyword">return</span> Person<span class="token punctuation">.</span>level<span class="token punctuation">;</span>\n      <span class="token keyword">default</span><span class="token punctuation">:</span>\n        <span class="token keyword">throw</span> HTError<span class="token punctuation">.</span><span class="token function">undefined</span><span class="token punctuation">(</span>varName<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token metadata symbol">@override</span>\n  <span class="token keyword">void</span> <span class="token function">memberSet</span><span class="token punctuation">(</span>String varName<span class="token punctuation">,</span> <span class="token keyword">dynamic</span> varValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">switch</span> <span class="token punctuation">(</span>varName<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">case</span> <span class="token string">&#39;Person.race&#39;</span><span class="token punctuation">:</span>\n        <span class="token keyword">throw</span> HTError<span class="token punctuation">.</span><span class="token function">immutable</span><span class="token punctuation">(</span>varName<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">case</span> <span class="token string">&#39;Person.level&#39;</span><span class="token punctuation">:</span>\n        <span class="token keyword">return</span> Person<span class="token punctuation">.</span>level <span class="token operator">=</span> varValue<span class="token punctuation">;</span>\n      <span class="token keyword">default</span><span class="token punctuation">:</span>\n        <span class="token keyword">throw</span> HTError<span class="token punctuation">.</span><span class="token function">undefined</span><span class="token punctuation">(</span>varName<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token metadata symbol">@override</span>\n  <span class="token keyword">dynamic</span> <span class="token function">instanceMemberGet</span><span class="token punctuation">(</span><span class="token keyword">dynamic</span> object<span class="token punctuation">,</span> String varName<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> i <span class="token operator">=</span> object <span class="token operator">as</span> Person<span class="token punctuation">;</span>\n    <span class="token keyword">return</span> i<span class="token punctuation">.</span><span class="token function">htFetch</span><span class="token punctuation">(</span>varName<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token metadata symbol">@override</span>\n  <span class="token keyword">void</span> <span class="token function">instanceMemberSet</span><span class="token punctuation">(</span><span class="token keyword">dynamic</span> object<span class="token punctuation">,</span> String varName<span class="token punctuation">,</span> <span class="token keyword">dynamic</span> varValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> i <span class="token operator">=</span> object <span class="token operator">as</span> Person<span class="token punctuation">;</span>\n    i<span class="token punctuation">.</span><span class="token function">htAssign</span><span class="token punctuation">(</span>varName<span class="token punctuation">,</span> varValue<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> hetu <span class="token operator">=</span> <span class="token function">Hetu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  hetu<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>externalClasses<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token function">PersonClassBinding</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  hetu<span class="token punctuation">.</span><span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;&#39;\n      external class Person {\n        var race: str\n        construct([name: str = &#39;Jimmy&#39;, race: str = &#39;Caucasian&#39;]);\n        get child\n        static fun meaning(n: num)\n        static get level\n        static set level (value: str)\n        construct withName(name: str, [race: str = &#39;Caucasian&#39;])\n        var name\n        fun greeting(tag: str)\n      }\n      fun main {\n        var p1: Person = Person()\n        p1.greeting(&#39;jimmy&#39;)\n        print(typeof p1)\n        print(p1.name)\n        print(p1.child)\n        print(&#39;My race is&#39;, p1.race)\n        p1.race = &#39;Reptile&#39;\n        print(&#39;Oh no! My race turned into&#39;, p1.race)\n\n        var p2 = Person.withName(&#39;Jimmy&#39;)\n        print(p2.name)\n        p2.name = &#39;John&#39;\n\n        Person.level = &#39;3&#39;\n        print(Person.level)\n\n        print(Person.meaning(42))\n      }\n      &#39;&#39;&#39;</span><span class="token punctuation">,</span> invokeFunc<span class="token punctuation">:</span> <span class="token string">&#39;main&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="auto-binding-tools"><a class="header-anchor" href="#auto-binding-tools" aria-hidden="true">#</a> Auto-Binding tools</h2><p>Thanks to <a href="https://github.com/rockingdice" target="_blank" rel="noopener noreferrer">rockingdice</a> we now have an automated tool for auto-generate both Dart-side and Hetu-side binding declarations for any Dart classes.</p><p>Please check out this repository: <a href="https://github.com/hetu-script/hetu-script-autobinding" target="_blank" rel="noopener noreferrer">hetu-script-autobinding</a></p>',35);p.render=function(a,t,p,e,c,u){return n(),s("div",null,[o])};export default p;export{t as __pageData};
